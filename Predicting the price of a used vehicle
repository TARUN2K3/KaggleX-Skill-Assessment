{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8657478,"sourceType":"datasetVersion","datasetId":5186633},{"sourceId":180866089,"sourceType":"kernelVersion"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\n\n# Load the training dataset\ntrain_df = pd.read_csv('/kaggle/input/car-data-set/train.csv')\ntest_df = pd.read_csv('/kaggle/input/car-data-set/test.csv')\n\n# Drop rows with missing values in the training set\ntrain_df.dropna(inplace=True)\n\n# Selecting features and target variable\nX_train = train_df[['brand', 'model', 'model_year', 'milage', 'fuel_type', 'engine', 'transmission', 'ext_col', 'int_col', 'accident', 'clean_title']]\ny_train = train_df['price']\n\n# Define the column transformer for preprocessing\ncategorical_features = ['brand', 'model', 'fuel_type', 'transmission', 'ext_col', 'int_col', 'engine', 'accident', 'clean_title']\nnumerical_features = ['model_year', 'milage']\n\n# Preprocessing for numerical data\nnumerical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())\n])\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Combine preprocessing steps\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_features),\n        ('cat', categorical_transformer, categorical_features)\n    ]\n)\n\n# Define the model pipeline\nmodel = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('regressor', LinearRegression())\n])\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Predicting the prices on the test set\nX_test = test_df[['id', 'brand', 'model', 'model_year', 'milage', 'fuel_type', 'engine', 'transmission', 'ext_col', 'int_col', 'accident', 'clean_title']]\ny_pred = model.predict(X_test)\n\n# Save predicted prices along with 'id' to a new DataFrame\npredicted_prices_df = pd.DataFrame({'id': X_test['id'], 'price': y_pred})\n\n# Save the DataFrame to a new CSV file\npredicted_prices_df.to_csv('sample_submission.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-10T17:25:30.338323Z","iopub.execute_input":"2024-06-10T17:25:30.338710Z","iopub.status.idle":"2024-06-10T17:25:37.382262Z","shell.execute_reply.started":"2024-06-10T17:25:30.338678Z","shell.execute_reply":"2024-06-10T17:25:37.381032Z"},"trusted":true},"execution_count":36,"outputs":[]}]}